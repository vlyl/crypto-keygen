import React, { useState } from 'react'
import { Dices, Eye, EyeOff, Copy, Download } from 'lucide-react'
import { Button, Card, CardHeader, CardBody, Textarea, Input, Alert } from './ui'
import { useWalletStore } from '@/stores/wallet'
import { formatMnemonic, copyToClipboard, downloadAsFile } from '@/utils/format'
import { isCryptoSecure } from '@/utils/crypto'
import type { MnemonicConfig } from '@/types'

export function MnemonicGenerator() {
  const { wallet, preferences, generateMnemonic, importMnemonic, ui, setError } = useWalletStore()
  const [config, setConfig] = useState<MnemonicConfig>({
    strength: 256,
    language: 'english',
    passphrase: '',
  })
  const [importValue, setImportValue] = useState('')
  const [showMnemonic, setShowMnemonic] = useState(!preferences.privacyScreen)
  const [showPassphrase, setShowPassphrase] = useState(false)

  const handleGenerate = async () => {
    try {
      await generateMnemonic(config)
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to generate mnemonic')
    }
  }

  const handleImport = async () => {
    if (!importValue.trim()) {
      setError('Please enter a mnemonic phrase')
      return
    }

    try {
      await importMnemonic(formatMnemonic(importValue), config.passphrase)
      setImportValue('')
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to import mnemonic')
    }
  }

  const handleCopy = async () => {
    if (wallet?.mnemonic) {
      const success = await copyToClipboard(wallet.mnemonic)
      if (!success) {
        setError('Failed to copy mnemonic to clipboard')
      }
    }
  }

  const handleDownload = () => {
    if (wallet?.mnemonic) {
      downloadAsFile(wallet.mnemonic, 'mnemonic.txt', 'text/plain')
    }
  }

  const wordCounts = [
    { value: 128, words: 12 },
    { value: 160, words: 15 },
    { value: 192, words: 18 },
    { value: 224, words: 21 },
    { value: 256, words: 24 },
  ]

  return (
    <div className="space-y-6">
      {/* Security Warning */}
      {!isCryptoSecure() && (
        <Alert variant="error">
          <div>
            <strong>Security Warning:</strong> Cryptographically secure random number generation 
            is not available in your browser. Generated mnemonics may not be secure.
          </div>
        </Alert>
      )}

      {/* Privacy Warning */}
      <Alert variant="warning">
        <div>
          <strong>Privacy Warning:</strong> If you share the information generated by this page 
          with anyone, they can steal your assets. Never share your mnemonic phrase or private keys.
        </div>
      </Alert>

      <Card>
        <CardHeader>
          <h2 className="text-lg font-semibold text-gray-900">Generate Mnemonic</h2>
          <p className="text-sm text-gray-600">
            Generate a new BIP39 mnemonic phrase for creating deterministic wallets
          </p>
        </CardHeader>
        <CardBody className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="form-label">Mnemonic Length</label>
              <select
                className="form-input"
                value={config.strength}
                onChange={(e) => setConfig({ ...config, strength: Number(e.target.value) })}
              >
                {wordCounts.map(({ value, words }) => (
                  <option key={value} value={value}>
                    {words} words
                  </option>
                ))}
              </select>
              {config.strength < 256 && (
                <p className="mt-1 text-xs text-yellow-600">
                  Shorter mnemonics have lower entropy and may be less secure
                </p>
              )}
            </div>

            <div>
              <label className="form-label">Language</label>
              <select
                className="form-input"
                value={config.language}
                onChange={(e) => setConfig({ ...config, language: e.target.value })}
              >
                <option value="english">English</option>
                <option value="japanese">Japanese</option>
                <option value="spanish">Spanish</option>
                <option value="chinese_simplified">Chinese (Simplified)</option>
                <option value="chinese_traditional">Chinese (Traditional)</option>
                <option value="french">French</option>
                <option value="italian">Italian</option>
                <option value="korean">Korean</option>
                <option value="czech">Czech</option>
                <option value="portuguese">Portuguese</option>
              </select>
            </div>

            <div className="flex items-end">
              <Button
                onClick={handleGenerate}
                loading={ui.loading}
                className="w-full"
                size="lg"
              >
                <Dices className="w-4 h-4 mr-2" />
                Generate
              </Button>
            </div>
          </div>

          <Input
            label="BIP39 Passphrase (Optional)"
            type={showPassphrase ? 'text' : 'password'}
            value={config.passphrase}
            onChange={(e) => setConfig({ ...config, passphrase: e.target.value })}
            placeholder="Additional passphrase for extra security"
            helperText="An optional passphrase that adds an extra layer of security"
            className="font-mono"
          />

          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowPassphrase(!showPassphrase)}
              >
                {showPassphrase ? (
                  <EyeOff className="w-4 h-4 mr-1" />
                ) : (
                  <Eye className="w-4 h-4 mr-1" />
                )}
                {showPassphrase ? 'Hide' : 'Show'} Passphrase
              </Button>
            </div>
          </div>
        </CardBody>
      </Card>

      <Card>
        <CardHeader>
          <h2 className="text-lg font-semibold text-gray-900">Import Existing Mnemonic</h2>
          <p className="text-sm text-gray-600">
            Enter an existing BIP39 mnemonic phrase to import your wallet
          </p>
        </CardHeader>
        <CardBody className="space-y-4">
          <Textarea
            label="BIP39 Mnemonic Phrase"
            value={importValue}
            onChange={(e) => setImportValue(e.target.value)}
            placeholder="Enter your 12, 15, 18, 21, or 24 word mnemonic phrase..."
            rows={3}
            className="font-mono"
          />

          <div className="flex space-x-2">
            <Button onClick={handleImport} loading={ui.loading} className="flex-1">
              Import Mnemonic
            </Button>
            <Button
              variant="secondary"
              onClick={() => setImportValue('')}
              disabled={!importValue}
            >
              Clear
            </Button>
          </div>
        </CardBody>
      </Card>

      {wallet?.mnemonic && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-lg font-semibold text-gray-900">Generated Mnemonic</h2>
                <p className="text-sm text-gray-600">
                  Your BIP39 mnemonic phrase - store this securely
                </p>
              </div>
              <div className="flex items-center space-x-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowMnemonic(!showMnemonic)}
                >
                  {showMnemonic ? (
                    <EyeOff className="w-4 h-4 mr-1" />
                  ) : (
                    <Eye className="w-4 h-4 mr-1" />
                  )}
                  {showMnemonic ? 'Hide' : 'Show'}
                </Button>
                <Button variant="ghost" size="sm" onClick={handleCopy}>
                  <Copy className="w-4 h-4 mr-1" />
                  Copy
                </Button>
                <Button variant="ghost" size="sm" onClick={handleDownload}>
                  <Download className="w-4 h-4 mr-1" />
                  Download
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardBody>
            <div
              className={`p-4 bg-gray-50 rounded-lg font-mono text-sm leading-relaxed ${
                showMnemonic ? '' : 'privacy-blur'
              } ${preferences.privacyScreen ? 'privacy-blur' : ''}`}
            >
              {wallet.mnemonic}
            </div>
            <div className="mt-2 text-xs text-gray-500">
              Word count: {wallet.mnemonic.split(' ').length} words
            </div>
          </CardBody>
        </Card>
      )}

      {ui.error && (
        <Alert variant="error">
          {ui.error}
        </Alert>
      )}
    </div>
  )
}